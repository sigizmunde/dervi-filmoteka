{"mappings":"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","sources":["node_modules/@swc/helpers/lib/_check_private_redeclaration.js","src/js/global.js","src/js/markup.js","node_modules/@swc/helpers/lib/_class_call_check.js","node_modules/@swc/helpers/lib/_class_private_method_get.js","node_modules/@swc/helpers/lib/_class_private_method_init.js","node_modules/@swc/helpers/lib/_create_class.js","src/js/dummy-array-objs/genres.json","src/js/movie-api.js","<<jsx-config-pragma.js>>","src/js/movies.js","src/index.js","src/js/controller.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _checkPrivateRedeclaration;\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n    if (privateCollection.has(obj)) {\n        throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n    }\n}\n","// module for all the global constants and variables\n\n// export const API_KEY = '8302862792abaeee103b53516f1a680a';\nexport const API_KEY = 'ed9b8dd4dcf22d9d746c4e21c6321e97';\nexport const API_BASE_URL = 'https://api.themoviedb.org/3';\nexport const API_IMG_URL = 'http://image.tmdb.org/t/p/w500';\n\nexport const refs = {};\n","// module for all the functions generating markup\nconst cardSection = document.querySelector('.card-section');\n\nimport { API_IMG_URL, refs } from './global';\nimport { parseGenresByString } from './movies';\n\nexport function showMovies(responseData) {\n  responseData.results.map(movie => {\n    const genreString = parseGenresByString(movie.genre_ids, 2);\n    refs.cardsBox.innerHTML += `\n          <li class=\"card\">\n            <a href=\"\" class=\"card-link\" movie-id=\"${movie.id}\">\n              <div class=\"card-button-slider\">\n                <img\n                  src=\"${API_IMG_URL}${movie.poster_path}\"\n                  class=\"card-image\"\n                  alt=\"\"\n                />\n                <div class=\"card-button-background\">\n                  <button class=\"card-button in-watched\">watched</button>\n                  <button class=\"card-button in-queue\">queue</button>\n                </div>\n              </div>\n              <div class=\"card-label-wrapper\">\n                <div class=\"card-label-in-watched\"></div>\n                <div class=\"card-label-in-queue\"></div>\n              </div>\n              <div class=\"card-body\">\n                <p class=\"card-title\"><b>${movie.original_title}</b></p>\n                <p class=\"card-genres\"><b>${genreString} | ${movie.release_date.substr(\n      0,\n      4\n    )}</b></p>\n              </div>\n            </a>\n          </li>`;\n  });\n}\n\nexport function showMovieInfo() {}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classCallCheck;\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classPrivateMethodGet;\nfunction _classPrivateMethodGet(receiver, privateSet, fn) {\n    if (!privateSet.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return fn;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classPrivateMethodInit;\nvar _checkPrivateRedeclaration = _interopRequireDefault(require(\"./_check_private_redeclaration\"));\nfunction _classPrivateMethodInit(obj, privateSet) {\n    (0, _checkPrivateRedeclaration).default(obj, privateSet);\n    privateSet.add(obj);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _createClass;\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\n","{\n  \"genres\": [\n    {\n      \"id\": 28,\n      \"name\": \"Action\"\n    },\n    {\n      \"id\": 12,\n      \"name\": \"Adventure\"\n    },\n    {\n      \"id\": 16,\n      \"name\": \"Animation\"\n    },\n    {\n      \"id\": 35,\n      \"name\": \"Comedy\"\n    },\n    {\n      \"id\": 80,\n      \"name\": \"Crime\"\n    },\n    {\n      \"id\": 99,\n      \"name\": \"Documentary\"\n    },\n    {\n      \"id\": 18,\n      \"name\": \"Drama\"\n    },\n    {\n      \"id\": 10751,\n      \"name\": \"Family\"\n    },\n    {\n      \"id\": 14,\n      \"name\": \"Fantasy\"\n    },\n    {\n      \"id\": 36,\n      \"name\": \"History\"\n    },\n    {\n      \"id\": 27,\n      \"name\": \"Horror\"\n    },\n    {\n      \"id\": 10402,\n      \"name\": \"Music\"\n    },\n    {\n      \"id\": 9648,\n      \"name\": \"Mystery\"\n    },\n    {\n      \"id\": 10749,\n      \"name\": \"Romance\"\n    },\n    {\n      \"id\": 878,\n      \"name\": \"Science Fiction\"\n    },\n    {\n      \"id\": 10770,\n      \"name\": \"TV Movie\"\n    },\n    {\n      \"id\": 53,\n      \"name\": \"Thriller\"\n    },\n    {\n      \"id\": 10752,\n      \"name\": \"War\"\n    },\n    {\n      \"id\": 37,\n      \"name\": \"Western\"\n    },\n    {\n      \"id\": 1982,\n      \"name\": \"Dummy\"\n    }\n  ]\n}","// module for working with API\nimport { API_BASE_URL, API_KEY } from './global';\nimport * as initialGenres from './dummy-array-objs/genres.json';\n\nexport default class APIService {\n  constructor() {\n    if (APIService._instance) {\n      return APIService._instance;\n    }\n    APIService._instance = this;\n\n    this.searchQuery = '';\n    this.genres = initialGenres.genres;\n\n    this.#loadGenres();\n  }\n\n  #fetchQuery(pathParams, searchParams) {\n    return fetch(`${API_BASE_URL}/${pathParams}?${searchParams}`).then(\n      response => {\n        if (!response.ok) {\n          throw new Error(response.status);\n        }\n        return response.json();\n      }\n    );\n  }\n\n  // TRENDING\n  getTrending(pageNum = 1, isDay = false) {\n    const pathParams = {\n      resource: 'trending',\n      mediaType: 'movie',\n      timeWindow: isDay ? 'day' : 'week',\n\n      get split() {\n        return `${this.resource}/${this.mediaType}/${this.timeWindow}`;\n      },\n    };\n\n    // Search params\n    const searchParams = new URLSearchParams({\n      api_key: API_KEY,\n      page: pageNum,\n    });\n\n    return this.#fetchQuery(pathParams.split, searchParams);\n  }\n\n  // SEARCH\n  searchMovie(query, pageNum = 1) {\n    // Path params\n    const pathParams = {\n      resource: 'search',\n      mediaType: 'movie',\n\n      get split() {\n        return `${this.resource}/${this.mediaType}`;\n      },\n    };\n\n    // Search params\n    const searchParams = new URLSearchParams({\n      api_key: API_KEY,\n      page: pageNum,\n      query,\n    });\n\n    return this.#fetchQuery(pathParams.split, searchParams);\n  }\n\n  // GET MOVIE\n  getMovie(movieId) {\n    // Path params\n    const pathParams = {\n      resource: 'movie',\n      id: movieId,\n\n      get split() {\n        return `${this.resource}/${this.id}`;\n      },\n    };\n\n    // Search params\n    const searchParams = new URLSearchParams({\n      api_key: API_KEY,\n    });\n\n    return this.#fetchQuery(pathParams.split, searchParams);\n  }\n\n  // GENRES\n  #loadGenres() {\n    // return genres.genres;\n    const pathParams = {\n      resource: 'genre',\n      mediaType: 'movie',\n      list: 'list',\n\n      get split() {\n        return `${this.resource}/${this.mediaType}/${this.list}`;\n      },\n    };\n\n    // Search params\n    const searchParams = new URLSearchParams({\n      api_key: API_KEY,\n    });\n\n    this.#fetchQuery(pathParams.split, searchParams).then(result => {\n      this.genres = result.genres;\n      console.log('loadGenres complete');\n    });\n  }\n\n  getGenres() {\n    return this.genres;\n  }\n}\n",null,"// main module to manipulate with data inside an application\n\nimport { API_KEY, API_BASE_URL, API_IMG_URL, refs } from './global';\n// import { fetchMovie, fetchMovies, getGenres } from 'movie-api';\nimport { showMovies } from './markup';\nimport APIService from './movie-api';\n// import DataStorage from './data.js';\n\n// const dataStorage = new DataStorage(API_KEY);\nconst API = new APIService();\n\n// let currentMovieList = [{ film1 }, { film2 }, { film3 }];\n\nexport function getMovieList(params) {\n  // depending on params requests API or data\n  if (!params) {\n    API.getTrending()\n      .then(responseData => {\n        showMovies(responseData);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nfunction getMovieInfo(id) {\n  return fetchMovie(id);\n}\n\nfunction search(params) {\n  // depending on params searches films in current list\n\n  return fetchMovies();\n}\n\nimport * as initialGenres from './dummy-array-objs/genres.json';\n\nfunction getGenres() {\n  // genreList = getGenres();\n  const genreList = API.getGenres();\n  return genreList;\n}\n\nexport function parseGenresByString(genre_ids = [], maxCount = 0) {\n  const genreList = getGenres();\n  const genreNames = [];\n\n  for (let i = 0; i < genre_ids.length; i++) {\n    if (maxCount && i === maxCount && i < genre_ids.length - 1) {\n      genreNames.push('others');\n      break;\n    }\n\n    const findValue = genreList.find(item => item.id === genre_ids[i]);\n\n    if (findValue) {\n      genreNames.push(findValue.name);\n    }\n  }\n\n  return genreNames.join(', ');\n}\n\nfunction addQueue(film) {\n  // gets dataStorage.getQueue, adds film.id and then sets dataStorage.setQueue\n}\n\nfunction addWatched(film) {\n  // gets dataStorage.getQueue, adds film.id and then sets dataStorage.setQueue\n}\n\nfunction removeQueue(film) {\n  // gets dataStorage.getQueue, removes film.id and then sets dataStorage.setQueue\n}\n\nfunction removeWatched(film) {\n  // gets dataStorage.getQueue, removes film.id and then sets dataStorage.setQueue\n}\n","import './sass/main.scss'; // draft file\n// import './js/draft'; // draft file\nimport { init } from './js/controller'; // movies\n\ndocument.addEventListener('DOMContentLoaded', init);\n\n//================================= test field =======================================\n\n//====================================================================================\n","// module for interface elements and their event listeners\n\nimport { API_KEY, refs } from './global';\nimport { getMovieList } from './movies';\n\nexport function init() {\n  //refs, event listeners, genres request, popular movies request\n  refs.cardsBox = document.querySelector('.cards-box');\n  getMovieList();\n}\n"],"names":["Object","defineProperty","module","exports","value","default","obj","privateCollection","has","TypeError","$4c5b307740f9440c$export$a9861bd62f48e142","$4c5b307740f9440c$export$21666b427502ea6d","document","querySelector","$1457a8b41868a85b$export$ee74f1750741a03b","responseData","results","map","movie","genreString","$3336333d54cdc52e$export$c7c96a8fe64ccb4f","genre_ids","cardsBox","innerHTML","concat","id","poster_path","original_title","release_date","substr","$665014edacbfe17b$exports","instance","Constructor","$82ce8d6f4ce6ea51$exports","receiver","privateSet","fn","$b5362597a15e80da$exports","$b5362597a15e80da$var$_checkPrivateRedeclaration","add","parcelRequire","__esModule","$74e7f8130373505f$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","$74e7f8130373505f$exports","protoProps","staticProps","prototype","$45eb949e2189fca4$exports","JSON","parse","$90f63e501fde6f2e$var$_fetchQuery","WeakSet","$90f63e501fde6f2e$var$_loadGenres","$90f63e501fde6f2e$export$2e2bcd8739ae039","APIService","$parcel$interopDefault","this","_instance","searchQuery","genres","$90f63e501fde6f2e$var$loadGenres","call","pageNum","arguments","isDay","pathParams","resource","mediaType","timeWindow","split","searchParams","URLSearchParams","api_key","page","$90f63e501fde6f2e$var$fetchQuery","query","movieId","fetch","then","response","ok","Error","status","json","list","result","_this","console","log","$3336333d54cdc52e$var$API","$3336333d54cdc52e$var$getGenres","getGenres","maxCount","genreNames","push","findValue","genreList","find","item","name","i1","join","addEventListener","params","getTrending","catch"],"version":3,"file":"index.2aa6563f.js.map"}