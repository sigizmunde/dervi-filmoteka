{"mappings":"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","sources":["node_modules/@swc/helpers/lib/_check_private_redeclaration.js","src/js/global.js","src/js/markup.js","node_modules/@swc/helpers/lib/_class_call_check.js","node_modules/@swc/helpers/lib/_class_private_method_get.js","node_modules/@swc/helpers/lib/_class_private_method_init.js","node_modules/@swc/helpers/lib/_create_class.js","src/js/movie-api.js","<<jsx-config-pragma.js>>","src/js/movies.js","src/index.js","src/js/controller.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _checkPrivateRedeclaration;\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n    if (privateCollection.has(obj)) {\n        throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n    }\n}\n","// module for all the global constants and variables\n\n// export const API_KEY = '8302862792abaeee103b53516f1a680a';\nexport const API_KEY = 'ed9b8dd4dcf22d9d746c4e21c6321e97';\nexport const API_BASE_URL = 'https://api.themoviedb.org/3';\nexport const API_IMG_URL = 'http://image.tmdb.org/t/p/w500';\n\nexport const refs = {\n    cardsBox: document.querySelector(\".cards-box\"),\n};\n\nexport const genreList = [];\n","// module for all the functions generating markup\n\nimport { API_IMG_URL, refs } from './global';\nimport { parseGenresByString } from './movies';\n\nexport function showMovies(responseData) {\n    responseData.results.map(movie => {\n        refs.cardsBox.innerHTML += `\n          <li class=\"card\">\n            <a href=\"\" class=\"card-link\" movie-id=\"${movie.id}\">\n              <img\n                src=\"${API_IMG_URL}${movie.poster_path}\"\n                class=\"card-image\"\n                alt=\"\"\n              />\n              <div class=\"card-body\">\n                <p class=\"card-title\"><b>${movie.original_title}</b></p>\n                <p class=\"card-genres\"><b>${parseGenresByString(movie.genre_ids, 2)} | ${movie.release_date.substr(0, 4)}</b></p>\n              </div>\n            </a>\n          </li>`\n      });\n}\n\nexport function showMovieInfo() {}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classCallCheck;\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classPrivateMethodGet;\nfunction _classPrivateMethodGet(receiver, privateSet, fn) {\n    if (!privateSet.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return fn;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classPrivateMethodInit;\nvar _checkPrivateRedeclaration = _interopRequireDefault(require(\"./_check_private_redeclaration\"));\nfunction _classPrivateMethodInit(obj, privateSet) {\n    (0, _checkPrivateRedeclaration).default(obj, privateSet);\n    privateSet.add(obj);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _createClass;\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\n","// module for working with API\n\nimport { API_BASE_URL, API_KEY } from \"./global\";\n\nexport default class APIService {\n  constructor() {\n    if (APIService._instance) {\n      return APIService._instance;\n    }\n    APIService._instance = this;\n\n    this.searchQuery = \"\";\n    this.genres = [];\n\n    this.#loadGenres();\n  }\n\n  #fetchQuery(pathParams, searchParams) {\n      return fetch(`${API_BASE_URL}/${pathParams}?${searchParams}`)\n        .then(response => {\n          if (!response.ok) {\n            throw new Error(response.status);\n          }\n          return response.json();\n        });\n  }\n\n  // TRENDING\n  getTrending(pageNum = 1, isDay = false) {       \n    const pathParams = {\n      resource: \"trending\",\n      mediaType: \"movie\", \n      timeWindow: isDay ? \"day\" : \"week\",\n\n      get split() {\n        return `${this.resource}/${this.mediaType}/${this.timeWindow}`;\n      }\n    }\n\n    // Search params\n    const searchParams = new URLSearchParams({\n      api_key: API_KEY,\n      page: pageNum,\n    });\n\n    return this.#fetchQuery(pathParams.split, searchParams);                 \n  }\n\n    // SEARCH\n    searchMovie(query, pageNum = 1) {\n        // Path params\n        const pathParams = {\n            resource: \"search\",\n            mediaType: \"movie\",\n            \n            get split() {\n                return `${this.resource}/${this.mediaType}`;    \n            }\n        }\n\n        // Search params\n        const searchParams = new URLSearchParams({\n            api_key: API_KEY,\n            page: pageNum,\n            query,\n        });\n\n        return this.#fetchQuery(pathParams.split, searchParams);\n    }\n\n    // GET MOVIE\n    getMovie(movieId) {\n        // Path params\n        const pathParams = {\n            resource: \"movie\",\n            id: movieId,            \n            \n            get split() {\n                return `${this.resource}/${this.id}`;    \n            }\n        }\n        \n        // Search params\n        const searchParams = new URLSearchParams({\n            api_key: API_KEY,\n        });\n        \n        return this.#fetchQuery(pathParams.split, searchParams);\n  }\n  \n  // GENRES\n  #loadGenres() {  \n    // return genres.genres;  \n    const pathParams = {\n      resource: \"genre\",\n      mediaType: \"movie\",\n      list: \"list\",\n\n      get split() {\n        return `${this.resource}/${this.mediaType}/${this.list}`;\n      }\n    }\n\n    // Search params\n      const searchParams = new URLSearchParams({\n          api_key: API_KEY,\n      });\n    \n    this.#fetchQuery(pathParams.split, searchParams)\n                .then(result => this.genres = result.genres);\n  }\n\n  getGenres() {\n    return this.genres;\n  }\n}\n\n",null,"// main module to manipulate with data inside an application\n\nimport { genreList, API_KEY, API_BASE_URL, API_IMG_URL, refs } from './global';\n// import { fetchMovie, fetchMovies, getGenres } from 'movie-api';\nimport { showMovies } from './markup';\nimport APIService from './movie-api';\n// import DataStorage from './data.js';\n\n// const dataStorage = new DataStorage(API_KEY);\nconst API = new APIService();\n\n// let currentMovieList = [{ film1 }, { film2 }, { film3 }];\n\nexport function getMovieList(params) {\n  // depending on params requests API or data\n  API.getTrending()\n    .then(responseData => {      \n      showMovies(responseData);\n    })\n    .catch(result => console.log(result));\n}\n\nfunction getMovieInfo(id) {\n  return fetchMovie(id);\n}\n\nfunction search(params) {\n  // depending on params searches films in current list\n\n  return fetchMovies();\n}\n\nfunction loadGenres() {\n  // genreList = getGenres();\n  const genreList = API.getGenres();\n  \n  return genreList;\n}\n\nexport function parseGenresByString(genre_ids = [], maxCount = 0) {\n  const genreList = loadGenres();\n  const genreNames = [];\n\n  for (let i = 0; i < genre_ids.length; i++) {\n    if (maxCount && i === maxCount) {\n      genreNames.push(\"others\");\n      break;\n    }\n\n    findValue = genreList.find(item => item.id === genre_ids[i]);\n\n    if (findValue) {\n      genreNames.push(findValue.name);\n    }\n  }\n  \n  return genreNames.join(\", \");  \n}\n\nfunction addQueue(film) {\n  // gets dataStorage.getQueue, adds film.id and then sets dataStorage.setQueue\n}\n\nfunction addWatched(film) {\n  // gets dataStorage.getQueue, adds film.id and then sets dataStorage.setQueue\n}\n\nfunction removeQueue(film) {\n  // gets dataStorage.getQueue, removes film.id and then sets dataStorage.setQueue\n}\n\nfunction removeWatched(film) {\n  // gets dataStorage.getQueue, removes film.id and then sets dataStorage.setQueue\n}\n\n","import './sass/main.scss'; // draft file\n// import './js/draft'; // draft file\nimport { init } from './js/controller'; // movies\n\ndocument.addEventListener('DOMContentLoaded', init);\n\n//================================= test field =======================================\n\n//====================================================================================\n","// module for interface elements and their event listeners\n\nimport { API_KEY, refs } from './global';\nimport { getMovieList } from './movies';\n\nexport function init() {\n  //refs, event listeners, genres request, popular movies request\n  // refs.cardsBox = document.querySelector(\".cards-box\");\n  getMovieList();\n}\n"],"names":["Object","defineProperty","module","exports","value","default","obj","privateCollection","has","TypeError","$4c5b307740f9440c$export$a9861bd62f48e142","$4c5b307740f9440c$export$21666b427502ea6d","cardsBox","document","querySelector","$1457a8b41868a85b$export$ee74f1750741a03b","responseData","results","map","movie","innerHTML","concat","id","poster_path","original_title","$3336333d54cdc52e$export$c7c96a8fe64ccb4f","genre_ids","release_date","substr","$665014edacbfe17b$exports","instance","Constructor","$82ce8d6f4ce6ea51$exports","receiver","privateSet","fn","$b5362597a15e80da$exports","$b5362597a15e80da$var$_checkPrivateRedeclaration","add","parcelRequire","__esModule","$74e7f8130373505f$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","$74e7f8130373505f$exports","protoProps","staticProps","prototype","$90f63e501fde6f2e$var$_fetchQuery","WeakSet","$90f63e501fde6f2e$var$_loadGenres","$90f63e501fde6f2e$export$2e2bcd8739ae039","APIService","$parcel$interopDefault","this","_instance","searchQuery","genres","$90f63e501fde6f2e$var$loadGenres","call","pageNum","arguments","isDay","pathParams","resource","mediaType","timeWindow","split","searchParams","URLSearchParams","api_key","page","$90f63e501fde6f2e$var$fetchQuery","query","movieId","fetch","then","response","ok","Error","status","json","list","result","_this","$3336333d54cdc52e$var$API","$3336333d54cdc52e$var$loadGenres","getGenres","maxCount","genreNames","push","findValue","genreList2","find","item","name","i1","join","addEventListener","getTrending","catch","console","log"],"version":3,"file":"index.c9f67d2d.js.map"}