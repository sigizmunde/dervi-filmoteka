{"mappings":"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","sources":["node_modules/@swc/helpers/lib/_check_private_redeclaration.js","src/js/global.js","src/js/markup.js","node_modules/@swc/helpers/lib/_class_private_method_get.js","node_modules/@swc/helpers/lib/_class_private_method_init.js","src/js/dummy-array-objs/genres.json","src/js/movie-api.js","src/js/movies.js","src/index.js","src/js/controller.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _checkPrivateRedeclaration;\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n    if (privateCollection.has(obj)) {\n        throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n    }\n}\n","// module for all the global constants and variables\n\n// export const API_KEY = '8302862792abaeee103b53516f1a680a';\nexport const API_KEY = 'ed9b8dd4dcf22d9d746c4e21c6321e97';\nexport const API_BASE_URL = 'https://api.themoviedb.org/3';\nexport const API_IMG_URL = 'http://image.tmdb.org/t/p/w500';\n\nexport const refs = {};\n","// module for all the functions generating markup\n\nimport { API_IMG_URL, refs } from './global';\nimport { parseGenresByString } from './movies';\n\nexport function showMovies(responseData) {\n  responseData.results.map(movie => {\n    const genreString = parseGenresByString(movie.genre_ids, 2);\n    refs.cardsBox.innerHTML += `\n          <li class=\"card\">\n            <a href=\"\" class=\"card-link\" movie-id=\"${movie.id}\">\n              <img\n                src=\"${API_IMG_URL}${movie.poster_path}\"\n                class=\"card-image\"\n                alt=\"\"\n              />\n              <div class=\"card-body\">\n                <p class=\"card-title\"><b>${movie.original_title}</b></p>\n                <p class=\"card-genres\"><b>${genreString} | ${movie.release_date.substr(\n      0,\n      4\n    )}</b></p>\n              </div>\n            </a>\n          </li>`;\n  });\n}\n\nexport function showMovieInfo() {}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classPrivateMethodGet;\nfunction _classPrivateMethodGet(receiver, privateSet, fn) {\n    if (!privateSet.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return fn;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classPrivateMethodInit;\nvar _checkPrivateRedeclaration = _interopRequireDefault(require(\"./_check_private_redeclaration\"));\nfunction _classPrivateMethodInit(obj, privateSet) {\n    (0, _checkPrivateRedeclaration).default(obj, privateSet);\n    privateSet.add(obj);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","{\n  \"genres\": [\n    {\n      \"id\": 28,\n      \"name\": \"Action\"\n    },\n    {\n      \"id\": 12,\n      \"name\": \"Adventure\"\n    },\n    {\n      \"id\": 16,\n      \"name\": \"Animation\"\n    },\n    {\n      \"id\": 35,\n      \"name\": \"Comedy\"\n    },\n    {\n      \"id\": 80,\n      \"name\": \"Crime\"\n    },\n    {\n      \"id\": 99,\n      \"name\": \"Documentary\"\n    },\n    {\n      \"id\": 18,\n      \"name\": \"Drama\"\n    },\n    {\n      \"id\": 10751,\n      \"name\": \"Family\"\n    },\n    {\n      \"id\": 14,\n      \"name\": \"Fantasy\"\n    },\n    {\n      \"id\": 36,\n      \"name\": \"History\"\n    },\n    {\n      \"id\": 27,\n      \"name\": \"Horror\"\n    },\n    {\n      \"id\": 10402,\n      \"name\": \"Music\"\n    },\n    {\n      \"id\": 9648,\n      \"name\": \"Mystery\"\n    },\n    {\n      \"id\": 10749,\n      \"name\": \"Romance\"\n    },\n    {\n      \"id\": 878,\n      \"name\": \"Science Fiction\"\n    },\n    {\n      \"id\": 10770,\n      \"name\": \"TV Movie\"\n    },\n    {\n      \"id\": 53,\n      \"name\": \"Thriller\"\n    },\n    {\n      \"id\": 10752,\n      \"name\": \"War\"\n    },\n    {\n      \"id\": 37,\n      \"name\": \"Western\"\n    },\n    {\n      \"id\": 1982,\n      \"name\": \"Dummy\"\n    }\n  ]\n}","// module for working with API\nimport { API_BASE_URL, API_KEY } from './global';\nimport * as initialGenres from './dummy-array-objs/genres.json';\n\nexport default class APIService {\n  constructor() {\n    if (APIService._instance) {\n      return APIService._instance;\n    }\n    APIService._instance = this;\n\n    this.searchQuery = '';\n    this.genres = initialGenres.genres;\n\n    this.#loadGenres();\n  }\n\n  #fetchQuery(pathParams, searchParams) {\n    return fetch(`${API_BASE_URL}/${pathParams}?${searchParams}`).then(\n      response => {\n        if (!response.ok) {\n          throw new Error(response.status);\n        }\n        return response.json();\n      }\n    );\n  }\n\n  // TRENDING\n  getTrending(pageNum = 1, isDay = false) {\n    const pathParams = {\n      resource: 'trending',\n      mediaType: 'movie',\n      timeWindow: isDay ? 'day' : 'week',\n\n      get split() {\n        return `${this.resource}/${this.mediaType}/${this.timeWindow}`;\n      },\n    };\n\n    // Search params\n    const searchParams = new URLSearchParams({\n      api_key: API_KEY,\n      page: pageNum,\n    });\n\n    return this.#fetchQuery(pathParams.split, searchParams);\n  }\n\n  // SEARCH\n  searchMovie(query, pageNum = 1) {\n    // Path params\n    const pathParams = {\n      resource: 'search',\n      mediaType: 'movie',\n\n      get split() {\n        return `${this.resource}/${this.mediaType}`;\n      },\n    };\n\n    // Search params\n    const searchParams = new URLSearchParams({\n      api_key: API_KEY,\n      page: pageNum,\n      query,\n    });\n\n    return this.#fetchQuery(pathParams.split, searchParams);\n  }\n\n  // GET MOVIE\n  getMovie(movieId) {\n    // Path params\n    const pathParams = {\n      resource: 'movie',\n      id: movieId,\n\n      get split() {\n        return `${this.resource}/${this.id}`;\n      },\n    };\n\n    // Search params\n    const searchParams = new URLSearchParams({\n      api_key: API_KEY,\n    });\n\n    return this.#fetchQuery(pathParams.split, searchParams);\n  }\n\n  // GENRES\n  #loadGenres() {\n    // return genres.genres;\n    const pathParams = {\n      resource: 'genre',\n      mediaType: 'movie',\n      list: 'list',\n\n      get split() {\n        return `${this.resource}/${this.mediaType}/${this.list}`;\n      },\n    };\n\n    // Search params\n    const searchParams = new URLSearchParams({\n      api_key: API_KEY,\n    });\n\n    this.#fetchQuery(pathParams.split, searchParams).then(result => {\n      this.genres = result.genres;\n      console.log('loadGenres complete');\n    });\n  }\n\n  getGenres() {\n    return this.genres;\n  }\n}\n","// main module to manipulate with data inside an application\n\nimport { API_KEY, API_BASE_URL, API_IMG_URL, refs } from './global';\n// import { fetchMovie, fetchMovies, getGenres } from 'movie-api';\nimport { showMovies } from './markup';\nimport APIService from './movie-api';\n// import DataStorage from './data.js';\n\n// const dataStorage = new DataStorage(API_KEY);\nconst API = new APIService();\n\n// let currentMovieList = [{ film1 }, { film2 }, { film3 }];\n\nexport function getMovieList(params) {\n  // depending on params requests API or data\n  if (!params) {\n    API.getTrending()\n      .then(responseData => {\n        showMovies(responseData);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nfunction getMovieInfo(id) {\n  return fetchMovie(id);\n}\n\nfunction search(params) {\n  // depending on params searches films in current list\n\n  return fetchMovies();\n}\n\nimport * as initialGenres from './dummy-array-objs/genres.json';\n\nfunction getGenres() {\n  // genreList = getGenres();\n  const genreList = API.getGenres();\n  return genreList;\n}\n\nexport function parseGenresByString(genre_ids = [], maxCount = 0) {\n  const genreList = getGenres();\n  const genreNames = [];\n\n  for (let i = 0; i < genre_ids.length; i++) {\n    if (maxCount && i === maxCount && i < genre_ids.length - 1) {\n      genreNames.push('others');\n      break;\n    }\n\n    findValue = genreList.find(item => item.id === genre_ids[i]);\n\n    if (findValue) {\n      genreNames.push(findValue.name);\n    }\n  }\n\n  return genreNames.join(', ');\n}\n\nfunction addQueue(film) {\n  // gets dataStorage.getQueue, adds film.id and then sets dataStorage.setQueue\n}\n\nfunction addWatched(film) {\n  // gets dataStorage.getQueue, adds film.id and then sets dataStorage.setQueue\n}\n\nfunction removeQueue(film) {\n  // gets dataStorage.getQueue, removes film.id and then sets dataStorage.setQueue\n}\n\nfunction removeWatched(film) {\n  // gets dataStorage.getQueue, removes film.id and then sets dataStorage.setQueue\n}\n","import './sass/main.scss'; // draft file\n// import './js/draft'; // draft file\nimport { init } from './js/controller'; // movies\n\ndocument.addEventListener('DOMContentLoaded', init);\n\n//================================= test field =======================================\n\n//====================================================================================\n","// module for interface elements and their event listeners\n\nimport { API_KEY, refs } from './global';\nimport { getMovieList } from './movies';\n\nexport function init() {\n  //refs, event listeners, genres request, popular movies request\n  refs.cardsBox = document.querySelector('.cards-box');\n  getMovieList();\n}\n"],"names":["Object","defineProperty","module","exports","value","default","obj","privateCollection","has","TypeError","$063512fb45095f43$export$21666b427502ea6d","$263aef85a4d00bfb$export$ee74f1750741a03b","responseData","results","map","movie","genreString","$98a09d5e2e3ad76c$export$c7c96a8fe64ccb4f","genre_ids","cardsBox","innerHTML","id","poster_path","original_title","release_date","substr","$c9f733bc98e3bbfd$exports","receiver","privateSet","fn","$60afe4cd2804d2bb$exports","$60afe4cd2804d2bb$var$_checkPrivateRedeclaration","add","parcelRequire","__esModule","$64b03a065230eaf5$exports","JSON","parse","$a7fe6be5afb57be9$var$_fetchQuery","WeakSet","$a7fe6be5afb57be9$var$_loadGenres","$a7fe6be5afb57be9$export$2e2bcd8739ae039","getTrending","pageNum","isDay","pathParams","resource","mediaType","timeWindow","split","this","searchParams","URLSearchParams","api_key","page","$parcel$interopDefault","$a7fe6be5afb57be9$var$fetchQuery","call","searchMovie","query","getMovie","movieId","getGenres","genres","constructor","_instance","searchQuery","$a7fe6be5afb57be9$var$loadGenres","fetch","then","response","ok","Error","status","json","list","result","console","log","$98a09d5e2e3ad76c$var$API","maxCount","genreList","genreNames","i","length","push","findValue","find","item","name","join","document","addEventListener","params","querySelector","catch"],"version":3,"file":"index.01286302.js.map"}