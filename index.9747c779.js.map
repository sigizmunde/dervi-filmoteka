{"mappings":"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","sources":["node_modules/@swc/helpers/lib/_check_private_redeclaration.js","src/js/global.js","src/js/markup.js","node_modules/@swc/helpers/lib/_class_private_method_get.js","node_modules/@swc/helpers/lib/_class_private_method_init.js","src/js/movie-api.js","src/js/movies.js","src/index.js","src/js/controller.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _checkPrivateRedeclaration;\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n    if (privateCollection.has(obj)) {\n        throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n    }\n}\n","// module for all the global constants and variables\n\n// export const API_KEY = '8302862792abaeee103b53516f1a680a';\nexport const API_KEY = 'ed9b8dd4dcf22d9d746c4e21c6321e97';\nexport const API_BASE_URL = 'https://api.themoviedb.org/3';\nexport const API_IMG_URL = 'http://image.tmdb.org/t/p/w500';\n\nexport const refs = {\n    cardsBox: document.querySelector(\".cards-box\"),\n};\n\nexport const genreList = [];\n","// module for all the functions generating markup\n\nimport { API_IMG_URL, refs } from './global';\nimport { parseGenresByString } from './movies';\n\nexport function showMovies(responseData) {\n    responseData.results.map(movie => {\n        refs.cardsBox.innerHTML += `\n          <li class=\"card\">\n            <a href=\"\" class=\"card-link\" movie-id=\"${movie.id}\">\n              <img\n                src=\"${API_IMG_URL}${movie.poster_path}\"\n                class=\"card-image\"\n                alt=\"\"\n              />\n              <div class=\"card-body\">\n                <p class=\"card-title\"><b>${movie.original_title}</b></p>\n                <p class=\"card-genres\"><b>${parseGenresByString(movie.genre_ids, 2)} | ${movie.release_date.substr(0, 4)}</b></p>\n              </div>\n            </a>\n          </li>`\n      });\n}\n\nexport function showMovieInfo() {}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classPrivateMethodGet;\nfunction _classPrivateMethodGet(receiver, privateSet, fn) {\n    if (!privateSet.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return fn;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classPrivateMethodInit;\nvar _checkPrivateRedeclaration = _interopRequireDefault(require(\"./_check_private_redeclaration\"));\nfunction _classPrivateMethodInit(obj, privateSet) {\n    (0, _checkPrivateRedeclaration).default(obj, privateSet);\n    privateSet.add(obj);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","// module for working with API\n\nimport { API_BASE_URL, API_KEY } from \"./global\";\n\nexport default class APIService {\n  constructor() {\n    if (APIService._instance) {\n      return APIService._instance;\n    }\n    APIService._instance = this;\n\n    this.searchQuery = \"\";\n    this.genres = [];\n\n    this.#loadGenres();\n  }\n\n  #fetchQuery(pathParams, searchParams) {\n      return fetch(`${API_BASE_URL}/${pathParams}?${searchParams}`)\n        .then(response => {\n          if (!response.ok) {\n            throw new Error(response.status);\n          }\n          return response.json();\n        });\n  }\n\n  // TRENDING\n  getTrending(pageNum = 1, isDay = false) {       \n    const pathParams = {\n      resource: \"trending\",\n      mediaType: \"movie\", \n      timeWindow: isDay ? \"day\" : \"week\",\n\n      get split() {\n        return `${this.resource}/${this.mediaType}/${this.timeWindow}`;\n      }\n    }\n\n    // Search params\n    const searchParams = new URLSearchParams({\n      api_key: API_KEY,\n      page: pageNum,\n    });\n\n    return this.#fetchQuery(pathParams.split, searchParams);                 \n  }\n\n    // SEARCH\n    searchMovie(query, pageNum = 1) {\n        // Path params\n        const pathParams = {\n            resource: \"search\",\n            mediaType: \"movie\",\n            \n            get split() {\n                return `${this.resource}/${this.mediaType}`;    \n            }\n        }\n\n        // Search params\n        const searchParams = new URLSearchParams({\n            api_key: API_KEY,\n            page: pageNum,\n            query,\n        });\n\n        return this.#fetchQuery(pathParams.split, searchParams);\n    }\n\n    // GET MOVIE\n    getMovie(movieId) {\n        // Path params\n        const pathParams = {\n            resource: \"movie\",\n            id: movieId,            \n            \n            get split() {\n                return `${this.resource}/${this.id}`;    \n            }\n        }\n        \n        // Search params\n        const searchParams = new URLSearchParams({\n            api_key: API_KEY,\n        });\n        \n        return this.#fetchQuery(pathParams.split, searchParams);\n  }\n  \n  // GENRES\n  #loadGenres() {  \n    // return genres.genres;  \n    const pathParams = {\n      resource: \"genre\",\n      mediaType: \"movie\",\n      list: \"list\",\n\n      get split() {\n        return `${this.resource}/${this.mediaType}/${this.list}`;\n      }\n    }\n\n    // Search params\n      const searchParams = new URLSearchParams({\n          api_key: API_KEY,\n      });\n    \n    this.#fetchQuery(pathParams.split, searchParams)\n                .then(result => this.genres = result.genres);\n  }\n\n  getGenres() {\n    return this.genres;\n  }\n}\n\n","// main module to manipulate with data inside an application\n\nimport { genreList, API_KEY, API_BASE_URL, API_IMG_URL, refs } from './global';\n// import { fetchMovie, fetchMovies, getGenres } from 'movie-api';\nimport { showMovies } from './markup';\nimport APIService from './movie-api';\n// import DataStorage from './data.js';\n\n// const dataStorage = new DataStorage(API_KEY);\nconst API = new APIService();\n\n// let currentMovieList = [{ film1 }, { film2 }, { film3 }];\n\nexport function getMovieList(params) {\n  // depending on params requests API or data\n  API.getTrending()\n    .then(responseData => {      \n      showMovies(responseData);\n    })\n    .catch(result => console.log(result));\n}\n\nfunction getMovieInfo(id) {\n  return fetchMovie(id);\n}\n\nfunction search(params) {\n  // depending on params searches films in current list\n\n  return fetchMovies();\n}\n\nfunction loadGenres() {\n  // genreList = getGenres();\n  const genreList = API.getGenres();\n  \n  return genreList;\n}\n\nexport function parseGenresByString(genre_ids = [], maxCount = 0) {\n  const genreList = loadGenres();\n  const genreNames = [];\n\n  for (let i = 0; i < genre_ids.length; i++) {\n    if (maxCount && i === maxCount) {\n      genreNames.push(\"others\");\n      break;\n    }\n\n    findValue = genreList.find(item => item.id === genre_ids[i]);\n\n    if (findValue) {\n      genreNames.push(findValue.name);\n    }\n  }\n  \n  return genreNames.join(\", \");  \n}\n\nfunction addQueue(film) {\n  // gets dataStorage.getQueue, adds film.id and then sets dataStorage.setQueue\n}\n\nfunction addWatched(film) {\n  // gets dataStorage.getQueue, adds film.id and then sets dataStorage.setQueue\n}\n\nfunction removeQueue(film) {\n  // gets dataStorage.getQueue, removes film.id and then sets dataStorage.setQueue\n}\n\nfunction removeWatched(film) {\n  // gets dataStorage.getQueue, removes film.id and then sets dataStorage.setQueue\n}\n\n","import './sass/main.scss'; // draft file\n// import './js/draft'; // draft file\nimport { init } from './js/controller'; // movies\n\ndocument.addEventListener('DOMContentLoaded', init);\n\n//================================= test field =======================================\n\n//====================================================================================\n","// module for interface elements and their event listeners\n\nimport { API_KEY, refs } from './global';\nimport { getMovieList } from './movies';\n\nexport function init() {\n  //refs, event listeners, genres request, popular movies request\n  // refs.cardsBox = document.querySelector(\".cards-box\");\n  getMovieList();\n}\n"],"names":["Object","defineProperty","module","exports","value","default","obj","privateCollection","has","TypeError","$063512fb45095f43$export$21666b427502ea6d","cardsBox","document","querySelector","$263aef85a4d00bfb$export$ee74f1750741a03b","responseData","results","map","movie","innerHTML","id","poster_path","original_title","$98a09d5e2e3ad76c$export$c7c96a8fe64ccb4f","genre_ids","release_date","substr","$c9f733bc98e3bbfd$exports","receiver","privateSet","fn","$60afe4cd2804d2bb$exports","$60afe4cd2804d2bb$var$_checkPrivateRedeclaration","add","parcelRequire","__esModule","$a7fe6be5afb57be9$var$_fetchQuery","WeakSet","$a7fe6be5afb57be9$var$_loadGenres","$a7fe6be5afb57be9$export$2e2bcd8739ae039","getTrending","pageNum","isDay","pathParams","resource","mediaType","timeWindow","split","this","searchParams","URLSearchParams","api_key","page","$parcel$interopDefault","$a7fe6be5afb57be9$var$fetchQuery","call","searchMovie","query","getMovie","movieId","getGenres","genres","constructor","_instance","searchQuery","$a7fe6be5afb57be9$var$loadGenres","fetch","then","response","ok","Error","status","json","list","result","$98a09d5e2e3ad76c$var$API","maxCount","genreList2","genreNames","i","length","push","findValue","find","item","name","join","addEventListener","catch","console","log"],"version":3,"file":"index.9747c779.js.map"}